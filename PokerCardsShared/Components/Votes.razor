<div class="row">
    <div class="col">
        @foreach (List<SizeVote> group in SizeVotes.OrderByDescending(item => item.Size).GroupBy(item => item.Size).Select(grp => grp.ToList()).ToList())
        {
            if (group.Count > 0)
            {
                int percent = group.Count * 100 / SizeVotes.Count;
                string title = group.FirstOrDefault().Size switch
                {
                    StorySize.XL => "Story size 8",
                    StorySize.L => "Story size 5",
                    StorySize.M => "Story size 3",
                    StorySize.S => "Story size 2",
                    StorySize.XS => "Story size 1",
                    _ => ""
                };
                <div class="mt-3 mb-2" title="@title">
                    <span class="progress-label mr-2">@group.FirstOrDefault().Size</span>
                    <div class="progress">
                        <div class="progress-bar" style="width: @(percent)%" aria-valuenow="@percent" aria-valuemin="0" aria-valuemax="100">@group.Count</div>
                    </div>
                </div>
                <div class="progress-note">@string.Join(", ", group.Select(item => item.User))</div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public List<SizeVote> SizeVotes { get; set; }
}
